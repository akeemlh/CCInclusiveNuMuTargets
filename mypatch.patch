diff --git a/bootstrap/CMakeLists.txt b/bootstrap/CMakeLists.txt
index 2d3e399..f94b781 100644
--- a/bootstrap/CMakeLists.txt
+++ b/bootstrap/CMakeLists.txt
@@ -96,7 +96,7 @@ ExternalProject_Add(MINERvA-101-Cross-Section
 #Nota Bene: This may not work well on Windows.  If you need to do that one day, read https://stackoverflow.com/questions/35765106/symbolic-links-cmake/41037224
 #TODO: If /cvmfs exists, symlink to central MParamFiles and MATFluxAndReweightFiles instead of downloading them.
 #      Not entirely sure symlinks work between /cvmfs, BlueArc, and CONDIR_INPUT_DIR to be fair.
-install(CODE "EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_INSTALL_PREFIX}/etc/MATFluxAndReweightFiles ${CMAKE_INSTALL_PREFIX}/lib/data )" )
+install(CODE "EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E create_symlink ../etc/MATFluxAndReweightFiles ${CMAKE_INSTALL_PREFIX}/lib/data )" )
 
 #Tell setup.sh about the installation directory of this package
 configure_file(setup.sh.in setup.sh @ONLY)
diff --git a/cuts/SignalDefinition.h b/cuts/SignalDefinition.h
index d4d18ec..326e3ce 100644
--- a/cuts/SignalDefinition.h
+++ b/cuts/SignalDefinition.h
@@ -26,3 +26,57 @@ class Q3Limit: public PlotUtils::SignalConstraint<UNIVERSE>
       return trueq3 < fQ3Max;
     }
 };
+
+namespace truth
+{
+    
+  template <class UNIVERSE>
+  class MuonEnergyMin: public PlotUtils::SignalConstraint<UNIVERSE>
+  {
+    public:
+      MuonEnergyMin(const double val, const std::string& name): PlotUtils::SignalConstraint<UNIVERSE>(name), fVal(val) {}
+
+    private:
+      bool checkConstraint(const UNIVERSE& univ) const override
+      {
+        return univ.GetTruthMuE() > fVal;
+      }
+      double fVal;
+  };
+
+  template <class UNIVERSE>
+  class MuonEnergyMax: public PlotUtils::SignalConstraint<UNIVERSE>
+  {
+    public:
+      MuonEnergyMax(const double val, const std::string& name): PlotUtils::SignalConstraint<UNIVERSE>(name), fVal(val) {}
+
+    private:
+      bool checkConstraint(const UNIVERSE& univ) const override
+      {
+        return univ.GetTruthMuE() < fVal;
+      }
+      double fVal;
+  };
+}
+
+namespace reco
+{
+
+  template <class UNIVERSE, class EVENT = PlotUtils::detail::empty>
+  class ANNConfidenceCut: public PlotUtils::Cut<UNIVERSE, EVENT>
+  {
+    public:
+      ANNConfidenceCut(const double conf): PlotUtils::Cut<UNIVERSE, EVENT>(std::string("ANN confidence > ") + std::to_string(conf)), fConf(conf) {}
+
+    private:
+      bool checkCut(const UNIVERSE& univ, EVENT& /*evt*/) const override
+      {
+        return univ.GetANNProb() > fConf; 
+      }
+      const double fConf;
+  };
+
+  template <class UNIVERSE, class EVENT = PlotUtils::detail::empty>
+  using MuonEnergyMax = PlotUtils::Maximum<UNIVERSE, double, &UNIVERSE::GetEmu, EVENT>;
+
+}
\ No newline at end of file
diff --git a/event/CVUniverse.h b/event/CVUniverse.h
index ceb3a23..988ead6 100644
--- a/event/CVUniverse.h
+++ b/event/CVUniverse.h
@@ -187,6 +187,19 @@ class CVUniverse : public PlotUtils::MinervaUniverse {
     return TMath::Sqrt(pow(nuclMass,2) + 2.0*(Enu-Emu)*nuclMass - Q2);
   }
 
+  double GetANNProb() const { return GetVecElem("ANN_plane_probs", 0); }
+  double GetTruthMuE() const { return GetDouble("truth_muon_E") ; }
+
+  int GetTargetZ() const {
+    return GetInt("MasterAnaDev_targetZ");
+  }
+
+  int GetANNTargetZ() const {
+    return GetInt("MasterAnaDev_ANN_targetZ");
+  }
+
+  int GetANNTargetID() const {return GetInt("MasterAnaDev_ANN_targetID");}
+
   //Still needed for some systematics to compile, but shouldn't be used for reweighting anymore.
   protected:
   #include "PlotUtils/WeightFunctions.h" // Get*Weight
diff --git a/runEventLoop.cpp b/runEventLoop.cpp
index 9338c93..90a9965 100644
--- a/runEventLoop.cpp
+++ b/runEventLoop.cpp
@@ -57,6 +57,7 @@ enum ErrorCodes
 #include "cuts/SignalDefinition.h"
 #include "cuts/q3RecoCut.h"
 #include "studies/Study.h"
+#include "studies/PerEventVarByGENIELabel2D.h"
 //#include "Binning.h" //TODO: Fix me
 
 //PlotUtils includes
@@ -132,12 +133,27 @@ void LoopAndFillEventSelection(
 
         for(auto& var: vars) var->selectedMCReco->FillUniverse(universe, var->GetRecoValue(*universe), weight); //"Fake data" for closure
 
+        for(auto& var: vars2D) var->selectedMCReco->FillUniverse(universe, var->GetRecoValueX(*universe), var->GetRecoValueY(*universe), weight); //"Fake data" for closure
+
+        for(auto& var: vars2D)
+        {
+          int targetZ = universe->GetANNTargetZ();
+          switch (targetZ)
+          {
+            case 6: //Carbon
+              var->CHistMC->FillUniverse(universe, var->GetRecoValueX(*universe), var->GetRecoValueY(*universe), weight); //"Fake data" for closure
+            case 26: //Iron
+              var->FeHistMC->FillUniverse(universe, var->GetRecoValueX(*universe), var->GetRecoValueY(*universe), weight); //"Fake data" for closure
+            case 82: //Iron
+              var->PbHistMC->FillUniverse(universe, var->GetRecoValueX(*universe), var->GetRecoValueY(*universe), weight); //"Fake data" for closure
+          }
+        }
         const bool isSignal = michelcuts.isSignal(*universe, weight);
 
         if(isSignal)
         {
           for(auto& study: studies) study->SelectedSignal(*universe, myevent, weight);
-
+          
           for(auto& var: vars)
           {
             //Cross section components
@@ -174,6 +190,7 @@ void LoopAndFillData( PlotUtils::ChainWrapper* data,
 				PlotUtils::Cutter<CVUniverse, MichelEvent>& michelcuts)
 
 {
+  std::cout<<"Len studies: " << studies.size() <<std::endl;
   std::cout << "Starting data loop...\n";
   const int nEntries = data->GetEntries();
   for (int i=0; i<data->GetEntries(); ++i) {
@@ -194,6 +211,19 @@ void LoopAndFillData( PlotUtils::ChainWrapper* data,
       {
         var->dataHist->FillUniverse(universe, var->GetRecoValueX(*universe), var->GetRecoValueY(*universe), 1);
       }
+      for(auto& var: vars2D)
+      {
+        int targetZ = universe->GetANNTargetZ();
+        switch (targetZ)
+        {
+          case 6: //Carbon
+            var->CHistData->FillUniverse(universe, var->GetRecoValueX(*universe), var->GetRecoValueY(*universe), 1); //"Fake data" for closure
+          case 26: //Iron
+            var->FeHistData->FillUniverse(universe, var->GetRecoValueX(*universe), var->GetRecoValueY(*universe), 1); //"Fake data" for closure
+          case 82: //Iron
+            var->PbHistData->FillUniverse(universe, var->GetRecoValueX(*universe), var->GetRecoValueY(*universe), 1); //"Fake data" for closure
+        }
+      }
     }
   }
   std::cout << "Finished data loop.\n";
@@ -342,10 +372,14 @@ int main(const int argc, const char** argv)
   }
 
   const bool doCCQENuValidation = (reco_tree_name == "CCQENu"); //Enables extra histograms and might influence which systematics I use.
+  std::cout << "Reached here!-6.\n";
+  std:: cout << reco_tree_name << std::endl;
 
   //const bool is_grid = false; //TODO: Are we going to put this back?  Gonzalo needs it iirc.
   PlotUtils::MacroUtil options(reco_tree_name, mc_file_list, data_file_list, "minervame1A", true);
+    std::cout << "Reached here!-5.\n";
   options.m_plist_string = util::GetPlaylist(*options.m_mc, true); //TODO: Put GetPlaylist into PlotUtils::MacroUtil
+    std::cout << "Reached here!-4.\n";
 
   // You're required to make some decisions
   PlotUtils::MinervaUniverse::SetNuEConstraint(true);
@@ -359,21 +393,27 @@ int main(const int argc, const char** argv)
   PlotUtils::Cutter<CVUniverse, MichelEvent>::reco_t sidebands, preCuts;
   PlotUtils::Cutter<CVUniverse, MichelEvent>::truth_t signalDefinition, phaseSpace;
 
-  const double minZ = 5980, maxZ = 8422, apothem = 850; //All in mm
-  preCuts.emplace_back(new reco::ZRange<CVUniverse, MichelEvent>("Tracker", minZ, maxZ));
+  const double minZ = 4683, maxZ = 5800, apothem = 850; //All in mm
+  preCuts.emplace_back(new reco::ZRange<CVUniverse, MichelEvent>("Targets", minZ, maxZ));
   preCuts.emplace_back(new reco::Apothem<CVUniverse, MichelEvent>(apothem));
-  preCuts.emplace_back(new reco::MaxMuonAngle<CVUniverse, MichelEvent>(20.));
+  preCuts.emplace_back(new reco::MaxMuonAngle<CVUniverse, MichelEvent>(17.));
   preCuts.emplace_back(new reco::HasMINOSMatch<CVUniverse, MichelEvent>());
   preCuts.emplace_back(new reco::NoDeadtime<CVUniverse, MichelEvent>(1, "Deadtime"));
   preCuts.emplace_back(new reco::IsNeutrino<CVUniverse, MichelEvent>());
-                                                                                                                                                   
+  preCuts.emplace_back(new reco::MuonEnergyMin<CVUniverse, MichelEvent>(2000.0, "EMu Min"));
+  preCuts.emplace_back(new reco::MuonEnergyMax<CVUniverse, MichelEvent>(50000.0, "EMu Max"));
+  preCuts.emplace_back(new reco::ANNConfidenceCut<CVUniverse, MichelEvent>(0.20));
+                                                                                                                   
   signalDefinition.emplace_back(new truth::IsNeutrino<CVUniverse>());
   signalDefinition.emplace_back(new truth::IsCC<CVUniverse>());
                                                                                                                                                    
-  phaseSpace.emplace_back(new truth::ZRange<CVUniverse>("Tracker", minZ, maxZ));
+  phaseSpace.emplace_back(new truth::ZRange<CVUniverse>("Targets", minZ, maxZ));
   phaseSpace.emplace_back(new truth::Apothem<CVUniverse>(apothem));
-  phaseSpace.emplace_back(new truth::MuonAngle<CVUniverse>(20.));
-  phaseSpace.emplace_back(new truth::PZMuMin<CVUniverse>(1500.));
+  phaseSpace.emplace_back(new truth::MuonAngle<CVUniverse>(17.));
+  phaseSpace.emplace_back(new truth::MuonEnergyMin<CVUniverse>(2000.0, "EMu Min"));
+  phaseSpace.emplace_back(new truth::MuonEnergyMax<CVUniverse>(50000.0, "EMu Max"));
+
+  //phaseSpace.emplace_back(new truth::PZMuMin<CVUniverse>(1500.));
                                                                                                                                                    
   PlotUtils::Cutter<CVUniverse, MichelEvent> mycuts(std::move(preCuts), std::move(sidebands) , std::move(signalDefinition),std::move(phaseSpace));
 
@@ -418,7 +458,8 @@ int main(const int argc, const char** argv)
   };
 
   std::vector<Variable2D*> vars2D;
-  if(doCCQENuValidation)
+
+  if(true)
   {
     std::cerr << "Detected that tree name is CCQENu.  Making validation histograms.\n";
     vars.push_back(new Variable("pzmu", "p_{||, #mu} [GeV/c]", dansPzBins, &CVUniverse::GetMuonPz, &CVUniverse::GetMuonPzTrue));
@@ -426,8 +467,17 @@ int main(const int argc, const char** argv)
     vars.push_back(new Variable("Erecoil", "E_{recoil}", robsRecoilBins, &CVUniverse::GetRecoilE, &CVUniverse::Getq0True)); //TODO: q0 is not the same as recoil energy without a spline correction
     vars2D.push_back(new Variable2D(*vars[1], *vars[0]));
   }
-
+  std::cout<<"Len Vars: " << vars.size() <<std::endl;
   std::vector<Study*> studies;
+  std::function<double(const CVUniverse&, const MichelEvent&)> ptmu = [](const CVUniverse& univ, const MichelEvent& evt) { return univ.GetMuonPT();};
+  std::function<double(const CVUniverse&, const MichelEvent&)> pzmu = [](const CVUniverse& univ, const MichelEvent& evt) { return univ.GetMuonPz();};
+
+  studies.push_back(new PerEventVarByGENIELabel2D(ptmu, pzmu, std::string("ptmu_vs_pzmu"), std::string("GeV/c"), dansPTBins, dansPzBins, error_bands));
+  //studies.push_back(new PerEventVarByGENIELabel2D(ptmu, pzmu, std::string("ptmu_vs_pzmu"), std::string("GeV/c"), dansPTBins, dansPzBins, error_bands));
+
+  //data_studies.push_back(new PerEventVarByGENIELabel2D(ptmu, pzmu, std::string("ptmu_vs_pzmu2"), std::string("GeV/c"), dansPTBins, dansPzBins, error_bands));
+
+
 
   CVUniverse* data_universe = new CVUniverse(options.m_data);
   std::vector<CVUniverse*> data_band = {data_universe};
@@ -435,6 +485,7 @@ int main(const int argc, const char** argv)
   data_error_bands["cv"] = data_band;
   
   std::vector<Study*> data_studies;
+  data_studies.push_back(new PerEventVarByGENIELabel2D(ptmu, pzmu, std::string("ptmu_vs_pzmu"), std::string("GeV/c"), dansPTBins, dansPzBins, data_error_bands));
 
   for(auto& var: vars) var->InitializeMCHists(error_bands, truth_bands);
   for(auto& var: vars) var->InitializeDATAHists(data_band);
@@ -467,7 +518,8 @@ int main(const int argc, const char** argv)
 
     for(auto& study: studies) study->SaveOrDraw(*mcOutDir);
     for(auto& var: vars) var->WriteMC(*mcOutDir);
-    for(auto& var: vars2D) var->Write(*mcOutDir);
+    for(auto& var: vars2D) var->WriteMC(*mcOutDir);
+    for(auto& study: studies) study->SaveOrDraw(*mcOutDir);
 
     //Protons On Target
     auto mcPOT = new TParameter<double>("POTUsed", options.m_mc_pot);
@@ -495,6 +547,10 @@ int main(const int argc, const char** argv)
 
     for(auto& var: vars) var->WriteData(*dataOutDir);
 
+    for(auto& var: vars2D) var->WriteData(*dataOutDir);
+
+    for(auto& study: data_studies) study->SaveOrDraw(*dataOutDir);
+
     //Protons On Target
     auto dataPOT = new TParameter<double>("POTUsed", options.m_data_pot);
     dataPOT->Write();
diff --git a/studies/PerEventVarByGENIELabel2D.h b/studies/PerEventVarByGENIELabel2D.h
new file mode 100644
index 0000000..f6a910e
--- /dev/null
+++ b/studies/PerEventVarByGENIELabel2D.h
@@ -0,0 +1,68 @@
+//studies includes
+#include "studies/Study.h"
+
+//Mehreen's includes
+#include "event/MichelEvent.h"
+#include "util/Categorized.h"
+#include "event/CVUniverse.h"
+
+//c++ includes
+#include <functional> //for std::function
+
+class PerEventVarByGENIELabel2D: public Study
+{
+  public:
+    //PerMichelVarByGENIELabel fills a histogram with 1 entry per Michel with some variable calculated from that Michel.  Your function will get to see the CVUniverse, the MichelEvent (= reconstructed Michels), and which Michel it's looping over.
+    using reco_t = std::function<double(const CVUniverse&, const MichelEvent&)>;
+
+    /*PerEventVarByGENIELabel2D(reco_t reco_x, reco_t reco_y, const std::string& varName, const std::string& varUnits, const int nBins, const double minBin, const double maxBin, const std::map<std::string, std::vector<CVUniverse*>>& univs): Study(), fReco_x(reco_x), fReco_y(reco_y)
+    {
+      std::map<int, std::string> GENIELabels = {{1, "QE"},
+                                                {8, "2p2h"},
+                                                {2, "RES"},
+                                                {3, "DIS"}};
+      m_VarToGENIELabel = new util::Categorized<HIST, int>(varName, varName + " [" + varUnits + "]", GENIELabels, nBins, minBin, maxBin, univs);
+    }*/
+
+    PerEventVarByGENIELabel2D(reco_t reco_x, reco_t reco_y, const std::string& varName, const std::string& varUnits, const std::vector<double> xBins, const std::vector<double> yBins, const std::map<std::string, std::vector<CVUniverse*>>& univs): Study(), fReco_x(reco_x), fReco_y(reco_y)
+    {
+      std::map<int, std::string> GENIELabels = {{1, "QE"},
+                                                {8, "2p2h"},
+                                                {2, "RES"},
+                                                {3, "DIS"}};
+      m_VarToGENIELabel = new util::Categorized<HIST, int>(varName, varName + " [" + varUnits + "]", GENIELabels, xBins, yBins, univs);
+    }
+
+    void SaveOrDraw(TDirectory& outDir)
+    {
+       outDir.cd();
+       m_VarToGENIELabel->visit([](HIST& wrapper)
+                                {
+                                  wrapper.SyncCVHistos();
+                                  wrapper.hist->Write();
+                                });
+
+       //TODO: You could do plotting here
+    }
+
+  private:
+    using HIST = PlotUtils::Hist2DWrapper<CVUniverse>;
+
+    reco_t fReco_x, fReco_y;
+
+    util::Categorized<HIST, int>* m_VarToGENIELabel;
+
+    //Overriding base class functions
+    //Do nothing for now...  Good place for data comparisons in the future. 
+    void fillSelected(const CVUniverse& univ, const MichelEvent& evt, const double weight) {}
+
+    //All of your plots happen here so far.
+    void fillSelectedSignal(const CVUniverse& univ, const MichelEvent& evt, const double weight)
+    {
+        
+        (*m_VarToGENIELabel)[univ.GetInteractionType()].FillUniverse(&univ, fReco_x(univ, evt), fReco_y(univ, evt), weight);
+    }
+
+    //Do nothing for now...  Good place for efficiency denominators in the future.
+    void fillTruthSignal(const CVUniverse& univ, const MichelEvent& evt, const double weight) {}
+};
diff --git a/util/Variable2D.h b/util/Variable2D.h
index cb7f1df..9c9e4c4 100644
--- a/util/Variable2D.h
+++ b/util/Variable2D.h
@@ -28,8 +28,19 @@ class Variable2D: public PlotUtils::Variable2DBase<CVUniverse>
 							   GetName().c_str(), BKGLabels,
 							   GetBinVecX(), GetBinVecY(), mc_error_bands);
 
+/*       std::map<int, std::string> MaterialLabels = {{0, "Carbon"},
+					       {1, "Iron"}, {2, "Lead"}, {3, "Plastic"}, {4, "Water"}}
+      m_MaterialHists = new util::Categorized<Hist, int>((GetName() + "_by_material").c_str(),
+							   GetName().c_str(), MaterialLabels,
+							   GetBinVecX(), GetBinVecY(), mc_error_bands); */
+
       efficiencyNumerator = new Hist((GetNameX() + "_" + GetNameY() + "_efficiency_numerator").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), mc_error_bands);
       efficiencyDenominator = new Hist((GetNameX() + "_" + GetNameY() + "_efficiency_denominator").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), truth_error_bands);
+      selectedMCReco = new Hist((GetName() + "_selected_mc_reco").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), mc_error_bands);
+      CHistMC = new Hist((GetName() + "_C_selected_mc_reco").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), mc_error_bands);
+      FeHistMC = new Hist((GetName() + "_Fe_selected_mc_reco").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), mc_error_bands);
+      PbHistMC = new Hist((GetName() + "_Pb_selected_mc_reco").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), mc_error_bands);
+
     }
 
     //Histograms to be filled
@@ -37,15 +48,56 @@ class Variable2D: public PlotUtils::Variable2DBase<CVUniverse>
     Hist* dataHist;  
     Hist* efficiencyNumerator;
     Hist* efficiencyDenominator;
+    Hist* selectedMCReco; //Treat the MC CV just like data for the closure test
+
+    Hist* CHistData;  
+    Hist* FeHistData;  
+    Hist* PbHistData;  
+    Hist* CHistMC;  
+    Hist* FeHistMC;  
+    Hist* PbHistMC;
 
     void InitializeDATAHists(std::vector<CVUniverse*>& data_error_bands)
     {
         const char* name = GetName().c_str();
   	dataHist = new Hist(Form("_data_%s", name), name, GetBinVecX(), GetBinVecY(), data_error_bands);
- 
+    CHistData = new Hist((GetName() + "_C_data").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), data_error_bands);
+    FeHistData = new Hist((GetName() + "_Fe_data_").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), data_error_bands);
+    PbHistData = new Hist((GetName() + "_Pb_data_").c_str(), GetName().c_str(), GetBinVecX(), GetBinVecY(), data_error_bands); 
+    
+/*       std::map<int, std::string> MaterialLabels = {{0, "Carbon"},
+					       {1, "Iron"}, {2, "Lead"}, {3, "Plastic"}, {4, "Water"}}
+      m_MaterialHists = new util::Categorized<Hist, int>((GetName() + "_by_material").c_str(),
+							   GetName().c_str(), MaterialLabels,
+							   GetBinVecX(), GetBinVecY(), data_error_bands); */
+
+    
+    }
+
+    void WriteData(TFile& file)
+    {
+      if (dataHist->hist) {
+        dataHist->hist->SetDirectory(&file);
+        dataHist->hist->Write();
+      }
+
+
+
+      if (CHistData->hist) {
+        CHistData->hist->SetDirectory(&file);
+        CHistData->hist->Write((GetName() + "_C_data").c_str());
+      }
+      if (FeHistData->hist) {
+        FeHistData->hist->SetDirectory(&file);
+        FeHistData->hist->Write((GetName() + "_Fe_data").c_str());
+      }
+      if (PbHistData->hist) {
+        PbHistData->hist->SetDirectory(&file);
+        PbHistData->hist->Write((GetName() + "_Pb_data").c_str());
+      }
     }
 
-    void Write(TFile& file)
+    void WriteMC(TFile& file)
     {
       SyncCVHistos();
       file.cd();
@@ -56,11 +108,6 @@ class Variable2D: public PlotUtils::Variable2DBase<CVUniverse>
                                       categ.hist->Write(); //TODO: Or let the TFile destructor do this the "normal" way?                                                                                           
                                     });
 
-      if (dataHist->hist) {
-		dataHist->hist->SetDirectory(&file);
-		dataHist->hist->Write();
-      }
-
       if(efficiencyNumerator)
       {
         efficiencyNumerator->hist->SetDirectory(&file); //TODO: Can I get around having to call SetDirectory() this many times somehow?
@@ -72,6 +119,29 @@ class Variable2D: public PlotUtils::Variable2DBase<CVUniverse>
         efficiencyDenominator->hist->SetDirectory(&file);
         efficiencyDenominator->hist->Write();
       }
+      if(selectedMCReco)
+      {
+        selectedMCReco->hist->SetDirectory(&file);
+        selectedMCReco->hist->Write((GetName() + "_data").c_str()); //Make this histogram look just like the data for closure tests
+      }
+
+
+
+      if(CHistMC)
+      {
+        CHistMC->hist->SetDirectory(&file);
+        CHistMC->hist->Write((GetName() + "_C_data").c_str()); //Make this histogram look just like the data for closure tests
+      }
+      if(FeHistMC)
+      {
+        FeHistMC->hist->SetDirectory(&file);
+        FeHistMC->hist->Write((GetName() + "_Fe_data").c_str()); //Make this histogram look just like the data for closure tests
+      }
+      if(PbHistMC)
+      {
+        PbHistMC->hist->SetDirectory(&file);
+        PbHistMC->hist->Write((GetName() + "_Pb_data").c_str()); //Make this histogram look just like the data for closure tests
+      }
     }
 
     //Only call this manually if you Draw(), Add(), or Divide() plots in this
